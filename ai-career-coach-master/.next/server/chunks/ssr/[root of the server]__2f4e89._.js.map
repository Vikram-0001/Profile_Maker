{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 34, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 40, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/HP/Desktop/Mini%20Project/SENS%20AI/ai-career-coach-master/node_modules/%40clerk/nextjs/src/runtime/node/safe-node-apis.js"],"sourcesContent":["/**\n * This file is used for conditional imports to mitigate bundling issues with Next.js server actions on version prior to 14.1.0.\n */\nconst { existsSync, writeFileSync, readFileSync, appendFileSync, mkdirSync, rmSync } = require('node:fs');\nconst path = require('node:path');\nconst fs = {\n  existsSync,\n  writeFileSync,\n  readFileSync,\n  appendFileSync,\n  mkdirSync,\n  rmSync,\n};\n\nmodule.exports = { fs, path };\n"],"names":[],"mappings":";;;;;AAAA,IAAA,yBAAA,CAAA,GAAA,qKAAA,CAAA,aAAA,EAAA;IAAA,sCAAA,OAAA,EAAA,MAAA;QAGA,MAAM,EAAE,UAAA,EAAY,aAAA,EAAe,YAAA,EAAc,cAAA,EAAgB,SAAA,EAAW,MAAA,CAAO,CAAA,GAAI,QAAQ,SAAS;QACxG,MAAM,OAAO,QAAQ,WAAW;QAChC,MAAM,KAAK;YACT;YACA;YACA;YACA;YACA;YACA;QACF;QAEA,OAAO,OAAA,GAAU;YAAE;YAAI;QAAK;IAAA;AAAA","ignoreList":[0]}},
    {"offset": {"line": 65, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 71, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/HP/Desktop/Mini%20Project/SENS%20AI/ai-career-coach-master/node_modules/%40clerk/nextjs/src/server/keyless-node.ts"],"sourcesContent":["import type { AccountlessApplication } from '@clerk/backend';\nimport { logger } from '@clerk/shared/logger';\n\n/**\n * Attention: Only import this module when the node runtime is used.\n * We are using conditional imports to mitigate bundling issues with Next.js server actions on version prior to 14.1.0.\n */\n// @ts-ignore\nimport nodeRuntime from '#safe-node-apis';\n\nimport { createClerkClientWithOptions } from './createClerkClient';\n\n/**\n * The Clerk-specific directory name.\n */\nconst CLERK_HIDDEN = '.clerk';\n\n/**\n * The Clerk-specific lock file that is used to mitigate multiple key creation.\n * This is automatically cleaned up.\n */\nconst CLERK_LOCK = 'clerk.lock';\n\n/**\n * The `.clerk/` is NOT safe to be commited as it may include sensitive information about a Clerk instance.\n * It may include an instance's secret key and the secret token for claiming that instance.\n */\nfunction updateGitignore() {\n  if (!nodeRuntime.fs) {\n    throw \"Clerk: fsModule.fs is missing. This is an internal error. Please contact Clerk's support.\";\n  }\n  const { existsSync, writeFileSync, readFileSync, appendFileSync } = nodeRuntime.fs;\n\n  if (!nodeRuntime.path) {\n    throw \"Clerk: fsModule.path is missing. This is an internal error. Please contact Clerk's support.\";\n  }\n  const gitignorePath = nodeRuntime.path.join(process.cwd(), '.gitignore');\n  if (!existsSync(gitignorePath)) {\n    writeFileSync(gitignorePath, '');\n  }\n\n  // Check if `.clerk/` entry exists in .gitignore\n  const gitignoreContent = readFileSync(gitignorePath, 'utf-8');\n  if (!gitignoreContent.includes(CLERK_HIDDEN + '/')) {\n    appendFileSync(gitignorePath, `\\n${CLERK_HIDDEN}/\\n`);\n  }\n}\n\nconst generatePath = (...slugs: string[]) => {\n  if (!nodeRuntime.path) {\n    throw \"Clerk: fsModule.path is missing. This is an internal error. Please contact Clerk's support.\";\n  }\n  return nodeRuntime.path.join(process.cwd(), CLERK_HIDDEN, ...slugs);\n};\n\nconst _TEMP_DIR_NAME = '.tmp';\nconst getKeylessConfigurationPath = () => generatePath(_TEMP_DIR_NAME, 'keyless.json');\nconst getKeylessReadMePath = () => generatePath(_TEMP_DIR_NAME, 'README.md');\n\nlet isCreatingFile = false;\n\nfunction safeParseClerkFile(): AccountlessApplication | undefined {\n  if (!nodeRuntime.fs) {\n    throw \"Clerk: fsModule.fs is missing. This is an internal error. Please contact Clerk's support.\";\n  }\n  const { readFileSync } = nodeRuntime.fs;\n  try {\n    const CONFIG_PATH = getKeylessConfigurationPath();\n    let fileAsString;\n    try {\n      fileAsString = readFileSync(CONFIG_PATH, { encoding: 'utf-8' }) || '{}';\n    } catch {\n      fileAsString = '{}';\n    }\n    return JSON.parse(fileAsString) as AccountlessApplication;\n  } catch {\n    return undefined;\n  }\n}\n\nconst createMessage = (keys: AccountlessApplication) => {\n  return `\\n\\x1b[35m\\n[Clerk]:\\x1b[0m You are running in keyless mode.\\nYou can \\x1b[35mclaim your keys\\x1b[0m by visiting ${keys.claimUrl}\\n`;\n};\n\nasync function createOrReadKeyless(): Promise<AccountlessApplication | undefined> {\n  if (!nodeRuntime.fs) {\n    // This should never happen.\n    throw \"Clerk: fsModule.fs is missing. This is an internal error. Please contact Clerk's support.\";\n  }\n  const { existsSync, writeFileSync, mkdirSync, rmSync } = nodeRuntime.fs;\n\n  /**\n   * If another request is already in the process of acquiring keys return early.\n   * Using both an in-memory and file system lock seems to be the most effective solution.\n   */\n  if (isCreatingFile || existsSync(CLERK_LOCK)) {\n    return undefined;\n  }\n\n  isCreatingFile = true;\n\n  writeFileSync(\n    CLERK_LOCK,\n    // In the rare case, the file persists give the developer enough context.\n    'This file can be deleted. Please delete this file and refresh your application',\n    {\n      encoding: 'utf8',\n      mode: '0777',\n      flag: 'w',\n    },\n  );\n\n  const CONFIG_PATH = getKeylessConfigurationPath();\n  const README_PATH = getKeylessReadMePath();\n\n  mkdirSync(generatePath(_TEMP_DIR_NAME), { recursive: true });\n  updateGitignore();\n\n  /**\n   * When the configuration file exists, always read the keys from the file\n   */\n  const envVarsMap = safeParseClerkFile();\n  if (envVarsMap?.publishableKey && envVarsMap?.secretKey) {\n    isCreatingFile = false;\n    rmSync(CLERK_LOCK, { force: true, recursive: true });\n\n    /**\n     * Notify developers.\n     */\n    logger.logOnce(createMessage(envVarsMap));\n\n    return envVarsMap;\n  }\n\n  /**\n   * At this step, it is safe to create new keys and store them.\n   */\n  const client = createClerkClientWithOptions({});\n  const accountlessApplication = await client.__experimental_accountlessApplications.createAccountlessApplication();\n\n  /**\n   * Notify developers.\n   */\n  logger.logOnce(createMessage(accountlessApplication));\n\n  writeFileSync(CONFIG_PATH, JSON.stringify(accountlessApplication), {\n    encoding: 'utf8',\n    mode: '0777',\n    flag: 'w',\n  });\n\n  // TODO-KEYLESS: Add link to official documentation.\n  const README_NOTIFICATION = `\n## DO NOT COMMIT\nThis directory is auto-generated from \\`@clerk/nextjs\\` because you are running in Keyless mode. Avoid committing the \\`.clerk/\\` directory as it includes the secret key of the unclaimed instance.\n  `;\n\n  writeFileSync(README_PATH, README_NOTIFICATION, {\n    encoding: 'utf8',\n    mode: '0777',\n    flag: 'w',\n  });\n\n  /**\n   * Clean up locks.\n   */\n  rmSync(CLERK_LOCK, { force: true, recursive: true });\n  isCreatingFile = false;\n\n  return accountlessApplication;\n}\n\nexport { createOrReadKeyless };\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 197, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}